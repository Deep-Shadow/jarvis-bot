/**
  Este documento serve como um guia para desenvolvedores que desejam estender as funcionalidades do bot, adicionando novos comandos personalizados.
  
üìç Onde Encontrar as Fun√ß√µes do Bot?
    - As fun√ß√µes e utilit√°rios que voc√™ pode usar para construir seus comandos est√£o organizados em dois arquivos principais no diret√≥rio src/utils/:

1. src/utils/functions.js
    - Este arquivo centraliza a maior parte da intera√ß√£o com o WhatsApp, como envio de mensagens, m√≠dias (imagens, v√≠deos, √°udios, stickers), rea√ß√µes, e manipula√ß√£o de grupos.
    - Quando voc√™ acessa as fun√ß√µes dentro de um comando (dentro do switch-case em src/index.js), elas j√° est√£o dispon√≠veis para voc√™ atrav√©s do objeto functions retornado por loadCommandFunctions.
  
  * Exemplos de fun√ß√µes dispon√≠veis aqui:
    - sendReply(text, mentions): Envia uma resposta √† mensagem original.
    - sendImageFromURL(url, caption): Envia uma imagem a partir de uma URL.
    - downloadImage(webMessage): Baixa uma imagem de uma mensagem.
    - sendSuccessReact(): Envia um emoji de "‚úÖ" como rea√ß√£o.
    - isAdmin(userJid, remoteJid, socket): Verifica se um usu√°rio √© administrador do grupo.
    - ban(remoteJid, userJid): Bane um membro do grupo.
    - getGroupMetadata(): Obt√©m metadados do grupo.
    - isImage, isVideo, isReply, etc.: Vari√°veis booleanas que indicam o tipo da mensagem recebida.

2. src/utils/index.js
    - Este arquivo cont√©m fun√ß√µes utilit√°rias diversas que ajudam na manipula√ß√£o de dados, strings, n√∫meros e outras tarefas auxiliares. Elas s√£o importadas diretamente no src/index.js no topo do arquivo.
  
   * Exemplos de fun√ß√µes dispon√≠veis aqui:
      - onlyNumbers(text): Extrai apenas n√∫meros de uma string.
      - getRandomName(extension): Gera um nome de arquivo aleat√≥rio.
      - isLink(text): Verifica se uma string √© um link.
      - toUserJid(number): Converte um n√∫mero para um JID de usu√°rio do WhatsApp.
      - getBuffer(url): Faz uma requisi√ß√£o HTTP e retorna os dados como um buffer.
      - removeAccentsAndSpecialCharacters(text): Remove acentos e caracteres especiais de uma string.

3. src/utils/database.js
    - Este arquivo gerencia a persist√™ncia de dados espec√≠ficos de grupos, como ativar/desativar recursos (anti-link, boas-vindas, etc.). As fun√ß√µes deste arquivo s√£o importadas e usadas diretamente em src/index.js para controlar o estado do bot por grupo.

  * Exemplos de fun√ß√µes dispon√≠veis aqui:
    - activateAntiLinkGroup(groupId): Ativa o recurso anti-link para um grupo.
    - isActiveWelcomeGroup(groupId): Verifica se o recurso de boas-vindas est√° ativo em um grupo.
    - getAutoResponderResponse(match): Obt√©m uma resposta de auto-responder.

üõ†Ô∏è Estrutura de um Novo Comando
    - Todos os comandos s√£o definidos dentro da fun√ß√£o startBot no arquivo src/index.js, utilizando uma estrutura switch-case baseada no command extra√≠do da mensagem.

Siga este modelo para criar um novo comando:
*/
case "nome-do-comando": {
    /** 
     1. Verifica√ß√µes Iniciais (Permiss√µes, Par√¢metros, Tipo de Mensagem)
        - Sempre comece validando se o comando pode ser executado.
        - Use `if (!(await isAdmin(...)))`, `if (!args.length)`, `if (!isImage)`, etc.
        - Se uma condi√ß√£o n√£o for atendida, lance um erro espec√≠fico (DangerError, InvalidParameterError, WarningError).
    */
    if (!isGroup) {
        throw new WarningError("Este comando s√≥ pode ser usado em grupos.");
    }
    if (!(await isAdmin(userJid, remoteJid, socket))) {
        throw new DangerError("Voc√™ n√£o tem permiss√£o para usar este comando!");
    }
    if (!args.length) {
        throw new InvalidParameterError("Voc√™ precisa fornecer um argumento.");
    }

    // 2. Feedback Imediato ao Usu√°rio (Rea√ß√µes/Mensagens de Aguarde)
    //    Use `sendWaitReact()` ou `sendWaitReply()` para indicar que o bot est√° processando.
    await sendWaitReact();
    // ou
    // await sendWaitReply("Estou processando seu pedido, aguarde...");

    // 3. L√≥gica Principal do Comando
    //    Aqui voc√™ implementa o que o comando realmente faz.
    //    Pode ser chamadas a APIs externas, manipula√ß√£o de arquivos, c√°lculos, etc.
    const meuArgumento = fullArgs.trim();
    // Exemplo: Simular uma chamada a uma API
    // const resultadoAPI = await minhaNovaApiExterna(meuArgumento);
    const resultadoExemplo = `Voc√™ digitou: ${meuArgumento}`;

    // 4. **Resposta ao Usu√°rio e Feedback Final**
    //    Use as fun√ß√µes de envio (`sendReply`, `sendText`, `sendImageFromURL`, etc.)
    //    e rea√ß√µes de sucesso/erro (`sendSuccessReact()`, `sendErrorReact()`).
    await sendSuccessReact();
    await sendReply(`O comando foi executado com sucesso! ${resultadoExemplo}`);

    // 5. **Obrigat√≥rio: `break;`**
    //    Sempre use `break;` para sair do `switch-case` ap√≥s a execu√ß√£o do comando.
    break;
}

/**
üí° Quando Usar Qual Fun√ß√£o?
Para decidir qual fun√ß√£o usar, pense no que voc√™ quer fazer:

üì• Lidar com Mensagens Recebidas (functions object)
 * args: Array com os argumentos ap√≥s o comando.
 * fullArgs: String completa de todos os argumentos.
 * body: Corpo completo da mensagem.
 * command: O comando detectado (sem o prefixo).
 * isImage, isVideo, isAudio, isSticker, isReply: Verifique o tipo da mensagem ou se √© uma resposta para direcionar a l√≥gica.
 * userJid: O JID (identificador do WhatsApp) do usu√°rio que enviou a mensagem.
 * remoteJid: O JID do chat (grupo ou PV) onde a mensagem foi enviada.
 * webMessage: O objeto completo da mensagem Baileys, √∫til para debugging ou opera√ß√µes avan√ßadas.
 
üì§ Enviar Respostas e M√≠dia (functions object)
 * sendText(text, mentions): Para mensagens de texto simples.
 * sendReply(text, mentions): Para responder diretamente √† mensagem do usu√°rio.
 * sendImageFromURL(url, caption), sendImageFromFile(file, caption), sendImageFromBuffer(buffer, caption): Para enviar imagens.
 * sendVideoFromURL(url, caption), sendVideoFromFile(file, caption), sendVideoFromBuffer(buffer, caption): Para enviar v√≠deos.
 * sendAudioFromURL(url, asVoice), sendAudioFromFile(file, asVoice), sendAudioFromBuffer(buffer, asVoice): Para enviar √°udios (com op√ß√£o de "√°udio como voz").
 * sendStickerFromURL(url), sendStickerFromFile(file), sendStickerFromBuffer(buffer): Para enviar figurinhas.
 * sendReact(emoji), sendSuccessReact(), sendWaitReact(), sendErrorReact(), sendWarningReact(): Para dar feedback visual com rea√ß√µes.
 * sendWaitReply(text), sendSuccessReply(text), sendErrorReply(text), sendWarningReply(text): Para mensagens de feedback com o prefixo e emoji do bot.

üë• Gerenciar Grupos (functions object)
 * getGroupMetadata(): Obter informa√ß√µes detalhadas do grupo.
 * getGroupAdmins(): Obter a lista de administradores do grupo.
 * ban(remoteJid, userJid): Remover um membro.
 * socket.groupParticipantsUpdate(remoteJid, [userJid], "promote"): Promover um membro a administrador.
 * socket.groupSettingUpdate(remoteJid, "announcement"): Fechar o grupo (apenas admins podem enviar mensagens).
 * socket.groupSettingUpdate(remoteJid, "not_announcement"): Abrir o grupo (todos podem enviar mensagens).

üß∞ Utilit√°rios Gerais (src/utils/index.js)
 * onlyNumbers(text): Limpar n√∫meros de telefone.
 * getRandomName(extension): Gerar nomes √∫nicos para arquivos tempor√°rios.
 * isLink(text): Verificar se um texto cont√©m um link.
 * toUserJid(number): Converter um n√∫mero para o formato de JID do WhatsApp.
 * delay(ms): Criar um atraso na execu√ß√£o.
 * isAdmin(userJid, remoteJid, socket) / isOwner(userJid, remoteJid, socket) / isBotOwner(userJid, remoteJid, socket): Para verificar permiss√µes do usu√°rio que enviou o comando.

üíæ Intera√ß√£o com o Banco de Dados (src/utils/database.js)
 * activate...Group(groupId) / deactivate...Group(groupId): Para ativar/desativar recursos por grupo (anti-link, boas-vindas, etc.).
 * isActive...Group(groupId): Para verificar o status de um recurso em um grupo.
 * getAutoResponderResponse(match): Para buscar respostas configuradas no auto-responder.

‚ö†Ô∏è Tratamento de Erros
√â crucial que seus comandos usem os erros personalizados definidos em src/errors.js para um tratamento consistente e mensagens claras para o usu√°rio:
 * InvalidParameterError: Use quando o usu√°rio fornecer par√¢metros incorretos ou insuficientes para o comando.
   * Ex: throw new InvalidParameterError("Voc√™ precisa informar o texto!");
 * WarningError: Use para avisos ou condi√ß√µes que impedem a execu√ß√£o, mas n√£o s√£o erros graves de l√≥gica (ex: "Link n√£o √© do YouTube!").
   * Ex: throw new WarningError("O link fornecido n√£o √© v√°lido.");
 * DangerError: Use para erros que indicam falta de permiss√£o ou problemas mais s√©rios na execu√ß√£o do comando.
   * Ex: throw new DangerError("Voc√™ n√£o tem permiss√£o para usar este comando!");
Qualquer outro erro que n√£o seja uma inst√¢ncia dessas classes ser√° capturado pelo try-catch principal e registrado no log de erros, enviando uma mensagem gen√©rica de erro ao usu√°rio.

üóëÔ∏è Gerenciamento de Arquivos Tempor√°rios
Se o seu comando baixar ou criar arquivos tempor√°rios (imagens, v√≠deos, etc.), √© extremamente importante que voc√™ os exclua ap√≥s o uso para evitar o ac√∫mulo de lixo no sistema.
Use fs.unlinkSync(filePath) no bloco finally para garantir a limpeza, mesmo que ocorram erros:
try {
    const filePath = await downloadImage(webMessage);
    // ... sua l√≥gica que usa filePath ...
} catch (error) {
    // ... tratamento de erro ...
} finally {
    // Garante que o arquivo tempor√°rio ser√° deletado
    if (fs.existsSync(filePath)) {
        fs.unlinkSync(filePath);
    }
}

Com este guia, voc√™ tem as ferramentas e o conhecimento da estrutura para come√ßar a adicionar novas e emocionantes funcionalidades ao seu bot! Boas cria√ß√µes!
*/